"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const attendance_1 = require("../controllers/attendance");
const qrCode_1 = require("../controllers/qrCode");
const section_1 = require("../controllers/section");
const studentSection_1 = require("../controllers/studentSection");
const auth_1 = require("../middlewares/auth");
const auth_2 = require("../controllers/auth");
const validate_1 = require("../middlewares/validate");
const user_1 = require("../models/user");
const attendance_2 = require("../validation/attendance");
const attendanceRouter = (0, express_1.Router)();
attendanceRouter.post('/section/create', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.createSectionSchema), section_1.createSection);
attendanceRouter.patch('/section/update', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.updateSectionSchema), section_1.updateSection);
attendanceRouter.delete('/section/delete', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.deleteSectionSchema), section_1.deleteSection);
attendanceRouter.post('/section/add-students', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.addStudentsToSectionSchema), studentSection_1.addStudentsToSection);
attendanceRouter.delete('/section/remove-students', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.removeStudentsFromSectionSchema), studentSection_1.removeStudentsFromSection);
attendanceRouter.post('/generate', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR), (0, validate_1.validate)(attendance_2.generateQRSchema), qrCode_1.generateQRCode);
attendanceRouter.post('/close', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR), (0, validate_1.validate)(attendance_2.closeQRSchema), qrCode_1.closeQRCode);
attendanceRouter.post('/verify/:code', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.STUDENT), (0, validate_1.validate)(attendance_2.verifyQRSchema), attendance_1.verifyAttendance);
attendanceRouter.post('/manual', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.manualAttendanceSchema), attendance_1.recordManualAttendance);
attendanceRouter.get('/', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.getAttendanceSchema), attendance_1.getAttendance);
attendanceRouter.get('/student', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.STUDENT), (0, validate_1.validate)(attendance_2.getAttendanceSchema), attendance_1.getStudentAttendance);
attendanceRouter.get('/statistics', auth_1.protect, (0, auth_2.allowTo)(user_1.UserRole.INSTRUCTOR, user_1.UserRole.ADMIN), (0, validate_1.validate)(attendance_2.getAttendanceStatisticsSchema), attendance_1.getAttendanceStatistics);
exports.default = attendanceRouter;
